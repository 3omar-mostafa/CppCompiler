name: Build

on:
  push:
    branches: [ main ]
    tags:
      - '*'


env:
    FORCE_COLOR : 'true' # Force colors in console output

jobs:
  Ubuntu:
    name: Build - Ubuntu - GCC ${{ matrix.gcc_version }}
    runs-on: ubuntu-22.04
    env:
      CC : gcc-${{ matrix.gcc_version }}
      CXX: g++-${{ matrix.gcc_version }}

    strategy:
      fail-fast: false
      matrix:
        gcc_version: [9, 10, 11]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Bison/Flex
      run: |
        sudo apt update
        sudo apt install bison flex -y

    - name: Build
      run: |
        mkdir cmake-build
        cd ./cmake-build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DVERBOSE=OFF
        cmake --build . --config Release --clean-first

    - name: Upload Binary
      uses: actions/upload-artifact@v3
      with:
        name: C++ Compiler Ubuntu - GCC v${{ matrix.gcc_version }}
        path: ./cmake-build/CppCompiler

    - name: Upload Generated C++ Grammar Files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: C++ Compiler Ubuntu - GCC v${{ matrix.gcc_version }} - Generated Grammar
        path: ./cmake-build/src/grammar/*

    - name: Rename Files
      run: mv ./cmake-build/CppCompiler CppCompiler_linux_gcc_${{ matrix.gcc_version }}

    - name: List Files
      if: always()
      run: ls -lRh

    - name: Release Files
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: "C++ Compiler v${{ github.event.release.tag_name }}"
        files: ./CppCompiler*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

########################################################################################

  Windows:
    name: Build - Windows - ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - cmake_generator: CodeBlocks - MinGW Makefiles
            cmake_platform_args: " "
            name: Mingw-w64 GCC 8
            output_name: mingw64_gcc_8
            os: windows-latest
            
          - cmake_generator: Visual Studio 16 2019
            cmake_platform_args: -A x64
            name: Visual Studio 2019
            output_name: vs2019
            os: windows-2019
            
          - cmake_generator: Visual Studio 17 2022
            cmake_platform_args: -A x64
            name: Visual Studio 2022
            output_name: vs2022
            os: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Bison/Flex
      run: choco install winflexbison3

    - name: Build
      run: |
        mkdir cmake-build
        cd ./cmake-build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DVERBOSE=OFF -G "${{ matrix.cmake_generator }}" ${{ matrix.cmake_platform_args }}
        cmake --build . --config Release --clean-first

    - name: Upload Binary
      uses: actions/upload-artifact@v3
      with:
        name: C++ Compiler Windows x64 - ${{ matrix.name }}
        path: |
          # Path varies from Visual Studio to MinGW
          ./cmake-build/CppCompiler.exe
          ./cmake-build/*/CppCompiler.exe

    - name: Upload Generated C++ Grammar Files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: C++ Compiler Windows x64 - ${{ matrix.name }} - Generated Grammar
        path: ./cmake-build/src/grammar/*

    - name: Rename Files
      shell: bash
      run: |
        mv ./cmake-build/CppCompiler.exe ./CppCompiler.exe || mv ./cmake-build/*/CppCompiler.exe ./CppCompiler.exe
        mv CppCompiler.exe CppCompiler_win64_${{ matrix.output_name }}.exe

    - name: List Files
      shell: bash
      run: ls -lRh

    - name: Release Files
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: "C++ Compiler v${{ github.event.release.tag_name }}"
        files: ./CppCompiler*.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
